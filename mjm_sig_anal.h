#ifndef MJM_SIG_ANAL_H__
#define MJM_SIG_ANAL_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"
#include "mjm_dohscope_samples.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2025 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Talking Rock GA 30175 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_sig_anal.h},
  url = {},
  version = {0.0.0},
  date-started={2025-07-09},
}
*/

// Wed 09 Jul 2025 03:06:17 PM EDT
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_sig_anal   
// QUICKCOMPILE  g++  -MMD -MF mjm_sig_anal.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_SIG_ANAL -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_sig_anal.h  -o mjm_sig_anal.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_sig_anal("mjm_sig_anal" , "  ");

template <class Tr>
class mjm_sig_anal 
{
 typedef mjm_sig_anal Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;

typedef mjm_dohscope_samples<Tr> Samples;

 class _feature  
{

public:
_feature() {Init_feature(); } 
~_feature() {Free_feature(); } 

_feature(const Line & l,  const IdxTy first ) { Init_feature(l,first); }
_feature(const StrTy & s,  const IdxTy flags ) { Init_feature(s,flags); }
_feature(const Ragged & r, const IdxTy first,const IdxTy i0, const IdxTy flags ) 
{Init_feature(r,first,i0,flags); } 
void set_fn(const StrTy & fn) { m_fn=fn; } 
StrTy save( const IdxTy flags=0) const { return Save_feature(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_feature(flags); } 
void add(const D & t, const D & x) { Add(t,x); } 
private:
void Init_feature(const StrTy & s,  const IdxTy flags ) 
{ Init_feature(); 
BaseParams kvp(s);

}
void Init_feature(const Line & l,  const IdxTy first ) 
{ 
Init_feature();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_feature

void Init_feature(const Ragged & r, const IdxTy first,const IdxTy i0,const IdxTy flags ) 
{
Init_feature();
const IdxTy sz=r.size();
for(IdxTy i=i0; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();

} // i 

} // Init_feature

StrTy Save_feature( const IdxTy flags=0) const  
{
StrTy s;
BaseParams kvp();
//kcp,encode(s,"",);
return s; 
} // Dump 
void Add(const D & t, const D & x) 
{  

D dx=0;
D dt=0;
m_hist.add(t,x);
if (m_n) { dx=x-m_x; dt=t-m_t; }
// TODO eventually too slow doh  buffer... 
if (m_fn.length())
{
if (m_n==0) 
{ std::ofstream os(m_fn); // remove crap first
if (m_wr_header) 
{
os<<"serial t x dt dx ";
os<<" dt100 dx100";
os<<CRLF;
} // header
}// m_n
} // m_fn
std::ofstream  os(m_fn,std::ios::app);
os<<std::setprecision(m_precision); 
os<<m_n<<" "<<t<<" "<<x<<" "<<dt<<" "<<dx;
if (m_hist.samples()>100) os<<" "<<(m_hist.trail(100,0)-t)<<" "<<(m_hist.trail(100,1)-x);
else os<<" 0 0";
os<<CRLF; 
m_x=x;
m_t=t;
++m_n;

}  // Add



StrTy Dump_feature( const IdxTy flags=0) const  
{
Ss ss;
// ss<<MMPR4(); 
return ss.str(); 
} // Dump 


void Free_feature()
{

} // Free_feature

void Init_feature()
{
m_x=0;
m_t=9;
m_n=0;
m_fn="";
m_wr_header=false;
m_precision=10; 
m_events=1000;
 m_hist.resize(2,m_events); 
} // Init_feature

// _featureMEMBERS
D m_x,m_t; // last values
IdxTy m_n; // number proc 
StrTy m_fn; // dest file  
bool m_wr_header;
IdxTy m_precision;
IdxTy m_events;
Samples m_hist;
}; // _feature

typedef _feature Feature;
// these need to be hierarchial with cool base clas...
// hard code a few for now... 
//typedef std::vector<Feature> FeatureList;
// This is nice code but incredibly slow
// Ideally linked lists in fixed shared block would be better
/// with head and tail pointers.
//typedef std::map<StrTy,FeatureList> FeatureMap;



// API

public:
mjm_sig_anal() {Init(); }
mjm_sig_anal(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_sig_anal(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void set(const StrTy & sin,const IdxTy flags) {Set(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

StrTy xxx_test(const StrTy & sin, const IdxTy flags) 
{ return XXX_test(sin,flags); } 
template <class Tp > IdxTy add_list(const Tp & x, const Tp & y) { return AddList(x,y); } 
IdxTy add(const D & x, const D & y) { return Add(x,y); }
~mjm_sig_anal() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=((~1)<<b); }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
StrTy XXX_test(const StrTy & sin, const IdxTy flags) 
{
StrTy sout="";
MM_ERR(MMPR3(sin,flags,sout))
BaseParams kvp(sin);

return sout;
} // XXX_test
IdxTy Add(const D & x, const D & y) { 

m_sb.add(x,y);
return DoTests(); 

} // Add

template <class Tp > IdxTy AddList(const Tp & x, const Tp & y) 
{ 
IdxTy rc=0;
MM_ILOOP(i,x.size()) { rc+=Add(x[9],y[i]); } 

return rc;
}  // AddList
D minmax(const D & x1, const D & x2, const D & x3)
{
const D th=0;
const bool max1=(x2-x1>=th);
const bool max2=(x2-x3>=th);
const bool min1=(x2-x1<=th);
const bool min2=(x2-x3<=th);
if (max1&&max2) return 1;
if (min1&&min2) return -1;
return 10;

} // minmax

D z_cross(const D & x1, const D & x2)
{
const D th=0;
const bool sp=(x1>=th)&&(x2<=th)&&(x1!=x2);
const bool sn=(x1<=th)&&(x2>=th)&&(x1!=x2);
if (sp) { return -x1/(x2-x1); } 
// this is negative to indicate direction of cross
if (sn) { return -x1/(x2-x1); } 

return 10;
}// z_cross


IdxTy DoTests()
{
IdxTy rc=0;
Samples & sb=m_sb;
if (sb.samples()<4) return rc;
const IdxTy ch=1;
D x1=sb.trail(0,ch);
D x2=sb.trail(1,ch);
D x3=sb.trail(2,ch);
D alpha=z_cross(x1,x2);
if (alpha<3)
{
++rc;
D t1=sb.trail(0,0);
D t2=sb.trail(1,0);
if (alpha<0) { alpha=-alpha;}
D t=(t2-t1)*alpha+t1;
D x=(x2-x1)*alpha+x1;
MM_ERR("zcross " << MMPR4(x1,x2,t1,t2)<<MMPR2(alpha,t))
m_zed.add(t,x);
++rc;
} // alpha

D gamma=minmax(x1,x2,x3);
if (gamma<3)
{
D t2=sb.trail(1,0);
MM_ERR("minmax " << MMPR4(x1,x2,x3,t2)<<MMPR(gamma))
D  x=x2;
D t=t2;
if (gamma>0) m_extremap.add(t,x);
else m_extreman.add(t,x);
++rc;
} // gamma



return rc; 
} // DoTests;


void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
Set(sin,flags);
} // Init 
void Set(const StrTy  & sin,const IdxTy flags =0  )
{
m_sb.set(sin,flags);
BaseParams kvp(sin);
kvp.get(m_channels,"channels");
kvp.get(m_points,"points");

if (kvp.has("channels")||kvp.has("points") ) m_sb.resize(m_channels,m_points); 
} //  Set 

void Init()
{
m_channels=1;
m_points=10000;
m_sb.resize(m_channels,m_points); 
m_min_max=true;
m_zed_cross=true;
m_zed.set_fn("zed_cross.txt");
m_extremap.set_fn("extremap.txt");
m_extreman.set_fn("extreman.txt");
} // Init

/*grep m_sb mjm_dohscope_buffer.h
void set_samples(const StrTy & s, const IdxTy flags=0) { m_sb.set(s,flags); } 
m_sb.set(s,flags); } 
m_sb.add(_x[i],_y[i]);
bool trig=m_trig.point(m_sb);
m_loc=m_sb.newest();
m_sb.add_trailing(m_r,m_prior);
m_sb.add_trailing(m_r,1);
//m_sb.add(t,c1);
m_sb.resize(m_channels,m_points); 
SampleBuf m_sb;
*/


// MEMBERS
Samples m_sb;
//FeatureMap m_ma;
Feature m_zed;
Feature m_extreman;
Feature m_extremap;
IdxTy m_points,m_channels;
bool m_min_max;
bool m_zed_cross;
}; // mjm_sig_anal

//////////////////////////////////////////////

template <class Tr>
class mjm_sig_anal_map : public std::map<typename Tr::StrTy, mjm_sig_anal< Tr > >  
{
 typedef mjm_sig_anal_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_sig_anal< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_sig_anal_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_sig_anal_map




////////////////////////////////////////////
#ifdef  TEST_MJM_SIG_ANAL
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_sig_anal <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;

#define CI(n) atoi(cip.wif(n).c_str()) 

void about()
{
Ss ss;
ss<<" MJM_SIG_ANAL "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;

#define CIP(n) atoi(cip.wif(n).c_str())
#define CFP(n) atof(cip.wif(n).c_str())

int main(int argc,char **args)
{
about();
typedef mjm_sig_anal<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="test") {StrTy xxx=x.xxx_test(cip.p1,CIP(2)); MM_ERR(MMPR(xxx))  }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_SIG_ANAL_H__ 
