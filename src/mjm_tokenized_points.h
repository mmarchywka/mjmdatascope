#ifndef MJM_TOKENIZED_POINTS_H__
#define MJM_TOKENIZED_POINTS_H__

#include "mjm_globals.h"
#include "mjm_vector_shapes.h"
#include "mjm_thread_util.h"
#include "mjm_string_tokenizer.h"
//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2023 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Jasper GA 30143 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_tokenized_points.h},
  url = {},
  version = {0.0.0},
  date-started={2023-12-18},
}
*/

// Mon 18 Dec 2023 05:58:26 PM EST
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_tokenized_points   
// QUICKCOMPILE  g++  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_TOKENIZED_POINTS -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_tokenized_points.h  -o mjm_tokenized_points.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_tokenized_points("mjm_tokenized_points" , "  ");

template <class Tr>
class mjm_tokenized_points 
{
 typedef mjm_tokenized_points Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
typedef string_tokenizer Tokenizer;
typedef string_tokenizer St;
public:
typedef mjm_vector_shapes<Tr> Shapes;
private:
 class _point_entry  
{

public:
_point_entry() {Init_point_entry(); } 
~_point_entry() {Free_point_entry(); } 

_point_entry(const Line & l,  const IdxTy first ) { Init_point_entry(l,first); }
_point_entry(const StrTy & s,  const IdxTy flags ) { Init_point_entry(s,flags); }
_point_entry(const Ragged & r, const IdxTy first,const IdxTy i0, St & st, const IdxTy flags ) 
{Init_point_entry(r,first,i0,st, flags); } 
StrTy save( const IdxTy flags=0) const { return Save_point_entry(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_point_entry(flags); } 
const D r() const { return m_r;}
const D g() const { return m_g;}
const D b() const { return m_b;}
const D x() const { return m_x;}
const D y() const { return m_y;}
const D z() const { return m_z;}
const D size() const { return m_size;}
bool valid() const { return m_shapep!=this; } 
const IdxTy color() const { return m_color; }
const IdxTy shape() const { return m_shape; }
void * shapep() const { return m_shapep; }
void shapep(void * p)  {  m_shapep=p; }
private:
void Init_point_entry(const StrTy & s,  const IdxTy flags ) 
{ Init_point_entry(); 
BaseParams kvp(s);

}
void Init_point_entry(const Line & l,  const IdxTy first ) 
{ 
Init_point_entry();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_point_entry
//PointEntry
//PointEntry p(r,i,0,m_st,0);
void Init_point_entry(const Ragged & r, const IdxTy first,const IdxTy i0,St & st, const IdxTy flags ) 
{
Init_point_entry();
const IdxTy sz=r.size();
IdxTy j=i0;
for(IdxTy i=first; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();
//MM_ERR(MMPR2(len,(i0+6)));
if (len<(i0+6)) return; 
//const IdxTy top=len-1-i0;
//switch (top) { default: } // len 
m_x=atof(l[j].c_str()); ++j;
m_y=atof(l[j].c_str()); ++j;
m_z=atof(l[j].c_str()); ++j;
m_size=atof(l[j].c_str()); ++j;
//m_color=st(l[j]); ++j;
m_color=myatoix(l[j].c_str()); ++j;
m_ri=(m_color>>16)&255;
m_gi=(m_color>>8)&255;
m_bi=(m_color>>0)&255;
m_r=D(m_ri)/255.0;
m_g=D(m_gi)/255.0;
m_b=D(m_bi)/255.0;

m_shape=st(l[j]); ++j;
m_shapep=0; 
//MM_ERR(MMPR(dump()))
break; // only do one iteration   
} // i 

} // Init_point_entry

StrTy Save_point_entry( const IdxTy flags=0) const  
{
StrTy s;
BaseParams kvp();
//kcp,encode(s,"",);
return s; 
} // Dump 



StrTy Dump_point_entry( const IdxTy flags=0) const  
{
Ss ss;
 ss<<MMPR4(m_x,m_y,m_z,m_size); 
 ss<<MMPR4(m_color,m_shape,m_ri,m_gi); 
 ss<<MMPR4(m_bi,m_r,m_g,m_b); 
 ss<<MMPR2(m_shapep,this); 
return ss.str(); 
} // Dump 


void Free_point_entry()
{

} // Free_point_entry

void Init_point_entry()
{
m_x=0;
m_y=0;
m_z=0;
m_size=0;
m_color=0;
m_shape=0;
// should kill copy ctor etc lol 
m_shapep=this; // invalud lol 
m_ri=0; m_gi=0; m_bi=0; m_b=0; m_g=0; m_r=0; 
} // Init_point_entry

// _point_entryMEMBERS

D m_x,m_y,m_z;
D m_size;
IdxTy m_color , m_shape;
void * m_shapep;
// moved to shape 
IdxTy m_ri,m_gi,m_bi;
D m_r,m_g,m_b;
}; // _point_entry


// API

public:
typedef _point_entry PointEntry;
typedef std::vector<PointEntry> PointVector;
typedef typename PointVector::const_iterator Ci;
mjm_tokenized_points() {Init(); }
mjm_tokenized_points(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_tokenized_points(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
//void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
// need to add to a vector wrf lol 
mjm_tokenized_points(const Myt & that  ) {*this=that;}
Ci begin() const { return m_points.begin(); } 
Ci end() const { return  m_points.end(); } 
IdxTy size() const { return m_points.size(); } 
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
const StrTy & operator()(const IdxTy i)  const { return m_st(i); } 
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

~mjm_tokenized_points() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
Myt & operator=(const Myt & that)
{

//Tokenizer m_st;
m_st=that.m_st; // cross fingers
//Shapes m_shapes;
m_shapes=that.m_shapes; // pray , no pointers 
//PointVector m_points;
m_points=that.m_points; // don't look now ZZ
// now all the shape pointers need to be updated to either this or
// the new shape.... 
auto m=m_shapes.assign_map(that.m_shapes);
MM_ILOOP(i,m_points.size())
{
if (that.m_points[i].valid())
m_points[i].shapep(m[m_points[i].shapep()]);
else 
m_points[i].shapep(&m_points[i]);

} // i 
return *this;
}  // operator=

private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static int myatoix(const char * c)   { return mjm_canned_methods::myatoix(c); }
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();
//MM_ERR(" adding point maybe "<<MMPR2(i,len))
if (len<4) continue;
if (l[0]=="#") continue;
//_point_entry(const Ragged & r, const IdxTy first,const IdxTy i0, St & st, const IdxTy flags ) 
// points need to be compact, no text and put labels
// in another sparse map 
// note that these points are locations given by user and are really
// shapes drawn at that loation composed of vertex points. 
PointEntry p(r,i,0,m_st,0);
// at this point it has a shape encoded number and a color and size
// but the shapep pointer is null. Lookup shape
// and give it that pointer. 
// need to make a specific one for each color and size?
if (p.valid()){ 
const StrTy & nm=m_st(p.shape());
void * ps=m_shapes.get(nm);
//p.shapep(m_shapes.get(m_st(p.shape())));
if (ps==0)
{
ps=m_shapes.get_default();
}
//MM_ERR(MMPR2(nm,ps))
p.shapep(ps);

// each point can have a pointer to a shape
m_points.push_back(p);
} // valie 
//MM_ERR(MMPR(m_points.size()))
}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{
m_shapes.load(StrTy(),0);

} // Init



// MEMBERS
Tokenizer m_st;
Shapes m_shapes;
PointVector m_points;

}; // mjm_tokenized_points

//////////////////////////////////////////////

template <class Tr>
class mjm_tokenized_points_map : public std::map<typename Tr::StrTy, mjm_tokenized_points< Tr > >  
{
 typedef mjm_tokenized_points_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_tokenized_points< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_tokenized_points_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_tokenized_points_map




////////////////////////////////////////////
#ifdef  TEST_MJM_TOKENIZED_POINTS
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_tokenized_points <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_TOKENIZED_POINTS "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;
int main(int argc,char **args)
{
about();
typedef mjm_tokenized_points<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_TOKENIZED_POINTS_H__ 
