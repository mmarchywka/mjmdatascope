#ifndef MJM_SVG_RENDER_H__
#define MJM_SVG_RENDER_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"
// /usr/include/librsvg-2.0/librsvg/rsvg.h
#include <freeglut.h>
#include "librsvg/rsvg.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2023 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Jasper GA 30143 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_svg_render.h},
  url = {},
  version = {0.0.0},
  date-started={2023-12-12},
}
*/

// Tue 12 Dec 2023 06:52:27 PM EST
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_svg_render   
// QUICxxKCOMPILE  g++  -Wall -Wno-misleading-indentation  -std=gnu++14 -DTEST_MJM_SVG_RENDER -I. -I../../mjm/hlib -I../../mjm/num -I/usr/include/glib-2.0  -I/usr/include/GL -I/usr/include/librsvg-2.0/librsvg.h  `pkg-config --cflags glib-2.0`  `pkg-config --libs glib-2.0` -I/usr/include/librsvg-2.0/ -gdwarf-3 -O0  -x c++ mjm_svg_render.h  -o mjm_svg_render.out -lpthread -lreadline
// QUICKCOMPILE  g++  -Wall -Wno-misleading-indentation  -std=gnu++14 -DTEST_MJM_SVG_RENDER -I. -I../../mjm/hlib -I../../mjm/num -I/usr/include/glib-2.0  -I/usr/include/GL -I/usr/include/librsvg-2.0/librsvg.h -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/cairo  -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include  -I/usr/include/librsvg-2.0/ -gdwarf-3 -O0  -x c++ mjm_svg_render.h  -o mjm_svg_render.out -lglib-2.0 -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_svg_render("mjm_svg_render" , "  ");

template <class Tr>
class mjm_svg_render 
{
 typedef mjm_svg_render Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
typedef unsigned char DataTy;

// API

public:
mjm_svg_render() {Init(); }
mjm_svg_render(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_svg_render(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}

void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
IdxTy load(const  char * p, const IdxTy len, const IdxTy flags)
{ return Load((const unsigned char *)p,len,flags); } 
IdxTy load(const unsigned char * p, const IdxTy len, const IdxTy flags)
{ return Load(p,len,flags); } 
void render_saved(const StrTy & sin,const IdxTy flags) {RenderSaved(sin,flags); }
void render(const StrTy & sin,const IdxTy flags) {Render(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }
IdxTy w() const { return m_w;}
IdxTy h() const { return m_h;}
const DataTy * data() const { return m_data; } 
~mjm_svg_render() {delete[] m_data; }
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);
// store or render 
IdxTy Load(const unsigned char * p, const IdxTy len, const IdxTy flags)
{
const bool extract_geo=!Bit(flags,0);
const bool whine_null_p=!Bit(flags,4);
if (!p)
{
if (whine_null_p) { MM_ERR(" null p nothing to do ") }
return 0; 
}
GError *error = NULL;
RsvgHandle *handle = rsvg_handle_new_from_data (p, len, &error);    /* 1 */
if (!handle)
{
MM_ERR(MMPR3(p,len,error->message)<<" no handle ")
return BAD;
}

if ( extract_geo)
{
RsvgRectangle& vp=m_vp;
RsvgRectangle& lvp=m_lvp;
RsvgRectangle invp = {   .x = 0.0, .y = 0.0, .width = 1.0, .height = 1.0, };
rsvg_handle_get_geometry_for_layer(handle, 0,&invp,&vp,&lvp, &error);
if (error )
{
MM_ERR(MMPR3(p,len,error->message)<<" failed to get geo  ")
return BAD;
} // error 
m_svg=StrTy((const char *)p);

} // extract_geo

//delete handle;
g_object_unref(handle); // .unref();
return 0; 
} // Load 
// https://gnome.pages.gitlab.gnome.org/librsvg/Rsvg-2.0/recommendations.html
void RenderSaved(const StrTy & sin, const IdxTy flags )
{
MM_ERR(" this crap leaks memory still wtf")
int w=m_vp.width; int h=m_vp.height;
BaseParams kvp(sin); kvp.get(w,"w"); kvp.get(h,"h");
MM_ERR(MMPR4(w,m_w,h,m_h))
if (m_w==w) if (m_h==h) return; 
//MM_ERR(" mem leadk test ")
//if (m_data) return; 
GError *error = NULL;
RsvgHandle *handle = 
	rsvg_handle_new_from_data ((const unsigned char *) m_svg.c_str(), m_svg.length(), &error);    /* 1 */
if (!handle)
{ MM_ERR(MMPR4(m_svg,w,h,error->message)<<" no handle "); return ; }
cairo_surface_t *surface = 
	cairo_image_surface_create (CAIRO_FORMAT_ARGB32, w, h); /* 2 */
cairo_t *cr = cairo_create (surface);
/* Render the handle scaled proportionally into that whole surface */

RsvgRectangle viewport = {   .x = 0.0, .y = 0.0, .width = D(w), .height = D(h), };
if (!rsvg_handle_render_document (handle, cr, &viewport, &error))  /* 4 */
  {
    //g_error ("could not render: %s", error->message);
    MM_ERR (MMPR4(m_svg,w,h, error->message)) }
/* The surface is now rendered */
// https://stackoverflow.com/questions/6108094/render-cairo-surface-directly-to-opengl-texture
//int tex_w; 
 m_w= cairo_image_surface_get_width(surface);
//int tex_h;
m_h = cairo_image_surface_get_height(surface);
typedef unsigned char  PixTy;
//m_data = cairo_image_surface_get_data(surface);
PixTy * _data = cairo_image_surface_get_data(surface);
const IdxTy sz=m_w*m_h*4; 
delete [] m_data;
m_data= new PixTy[sz];
cairo_surface_flush(surface);
::memcpy(m_data,_data,sz*sizeof(PixTy));
// this bombs, its not this lol 
//delete[] _data;
// free ..
MM_ERR(" now freeing crap ");
// TODO this crap is leaking //FCK 
//delete cr;
cairo_destroy(cr);
cairo_surface_destroy(surface);
//delete surface;
//delete handle;
g_object_unref(handle); // .unref();
} // RenderSaved
void Render(const StrTy & sin, const IdxTy flags )
{
int WIDTH=256;
int HEIGHT=256;
GError *error = NULL;
GFile *file = g_file_new_for_path ("xxx.svg");
RsvgHandle *handle = rsvg_handle_new_from_gfile_sync (file, RSVG_HANDLE_FLAGS_NONE, NULL, &error);    /* 1 */
//RsvgHandle *handle = rsvg_handle_new_from_data (data, len, &error);    /* 1 */

if (!handle)
  {
    g_error ("could not load: %s", error->message);
  }
// https://www.cairographics.org/manual/cairo-cairo-surface-t.html#cairo-surface-destroy
cairo_surface_t *surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, WIDTH, HEIGHT);           /* 2 */
cairo_t *cr = cairo_create (surface);

/* Render the handle scaled proportionally into that whole surface */

RsvgRectangle viewport = {                                                                            /* 3 */
  .x = 0.0,
  .y = 0.0,
  .width = D(WIDTH),
  .height = D(HEIGHT),
};

if (!rsvg_handle_render_document (handle, cr, &viewport, &error))                                     /* 4 */
  {
    g_error ("could not render: %s", error->message);
  }

/* The surface is now rendered */
// https://stackoverflow.com/questions/6108094/render-cairo-surface-directly-to-opengl-texture
//int tex_w; 
 m_w= cairo_image_surface_get_width(surface);
//int tex_h;
m_h = cairo_image_surface_get_height(surface);
typedef unsigned char  PixTy;
//m_data = cairo_image_surface_get_data(surface);
PixTy * _data = cairo_image_surface_get_data(surface);
const IdxTy sz=m_w*m_h*4; 
delete [] m_data;
m_data= new PixTy[sz];
::memcpy(m_data,_data,sz*sizeof(PixTy));
// free ..
MM_ERR(" now freeing crap ");
//delete cr;
cairo_destroy(cr);
//delete surface;
cairo_surface_destroy(surface);
//delete handle;
g_object_unref(handle); // .unref();
//delete file;

} // Render

void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{
m_data=0;
m_w=BAD;
m_h=BAD;

} // Init



// MEMBERS
DataTy * m_data;
IdxTy m_w,m_h;
RsvgRectangle m_vp,m_lvp;
StrTy m_svg;

}; // mjm_svg_render

//////////////////////////////////////////////

template <class Tr>
class mjm_svg_render_map : public std::map<typename Tr::StrTy, mjm_svg_render< Tr > >  
{
 typedef mjm_svg_render_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_svg_render< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_svg_render_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_svg_render_map




////////////////////////////////////////////
#ifdef  TEST_MJM_SVG_RENDER
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_svg_render <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_SVG_RENDER "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;
int main(int argc,char **args)
{
about();
typedef mjm_svg_render<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="render") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_SVG_RENDER_H__ 
