#ifndef MJM_FF_BAND_H__
#define MJM_FF_BAND_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

#include "mjm_ff_objects.h"
#include "mjm_geo_contains.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
#include "mjm_versatile_point.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"


#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>

/*
@software{,
  author = {Michael J Marchywka},
  title = {},
abstract=(),
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename = {},
  url = {},
  version = {0.0.0},
  date-started = {}
}
*/

// create a band along a contour or isolevel with some
// properties. Each segment generates a rectangle that will in 
// general need to be re-rodered and will overlap one way with the next
// while creating a trinagular void in oppose normal dir.
// voids filled by TBD 
// Sun 09 Jul 2023 08:56:07 AM EDT
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_ff_band   
// QUICKCOMPILE  g++  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_FF_BAND -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_ff_band.h  -o mjm_ff_band.out -lpthread -lreadline

/*
bands are created from etch fronts or other contours with a 
segment and local height/depth perpendicular to some normal
although guarantees still being worked out.
4 points need not be convex and they are turned into 3 triangles
for now although gaps still possible if the normals are not
the same at adjacent places. 

*/


mjm_global_credits::credit __credit__mjm_ff_band("mjm_ff_band" , "  ");

template <class Tr>
class mjm_ff_band 
{
 typedef mjm_ff_band Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;

typedef mjm_geo_contains<Tr> GeoUtil;

typedef mjm_ff_node<Tr> vertex_type;
typedef vertex_type V;
typedef std::vector<vertex_type> Verticies;
// simple kluge for now... 
typedef V Point;
// right now using members x and y in termplates
// and a vector point would fail... 
// although now I have added refernce kluges... 
typedef mjm_versatile_point<Tr,2,0>  Vpoint; 
class _band_element
{

public:
_band_element() {}
template <class Tp> _band_element(
const Tp & p1, const Tp & p2, const Tp & p3, const Tp & p4)
{ 
p[0]=p1; 
p[1]=p2; 
p[2]=p3; 
p[3]=p4; 
}

Vpoint p[4];


}; // _band_element

typedef _band_element BandElement;
typedef std::vector<BandElement> Elements; 

class _band_triangle
{

public:
_band_triangle() {}
template <class Tp> _band_triangle(
const Tp & p1, const Tp & p2, const Tp & p3)
{ 
p[0]=p1; 
p[1]=p2; 
p[2]=p3; 

}


Vpoint p[3];


}; // _band_triangle
typedef std::vector<_band_triangle> Triangles;

// API

public:
mjm_ff_band() {}
~mjm_ff_band() {}
typedef _band_triangle tri_type;
// two etch dirs on seg ends... 
// need to make oriented triangles...
// if e signs change flip points.. 
template <class Tp> void add_element(
const Tp & p1, const Tp & p2, const Tp & p3, const Tp & p4,
const D & e1, const D & e2, const IdxTy flags
)
{
// this needs to reduce to 3 orineted triangles... 
AddElement(p1,p2,p3,p4,e1,e2,flags);

}
const tri_type & operator[](const IdxTy i) const { return m_tri[i];}
void clear() {m_tri.clear(); m_el.clear();}
IdxTy size() const { return m_tri.size(); }

StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);
template <class Tp> void AddElement(
const Tp & p1, const Tp & p2, const Tp & p3, const Tp & p4,
const D & e1, const D & e2, const IdxTy flags
)
{
// if e1 and e2 have the same signs the curves should not crss
// but need not be convex. Find 3 triangles that should cover
// the desired space. Note that overlap and triangular voids
// between elements may occur depending on how normals are found.
GeoUtil gu;
const IdxTy dir=0;
// still avoid multiplication lol
m_el.push_back(BandElement(p1,p2,p3,p4));
m_tri.push_back(tri_type(p1,p2,p3));
gu.orient(m_tri.back().p,dir);
m_tri.push_back(tri_type(p1,p2,p4));
m_tri.push_back(tri_type(p2,p3,p4));
} // AddElement

// MEMBERS
Elements m_el;
Triangles m_tri;

}; // mjm_ff_band

//////////////////////////////////////////////

template <class Tr>
class mjm_ff_band_map : public std::map<typename Tr::StrTy, mjm_ff_band< Tr > >  
{
 typedef mjm_ff_band_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_ff_band< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_ff_band_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_ff_band_map




////////////////////////////////////////////
#ifdef  TEST_MJM_FF_BAND
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_ff_band <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_FF_BAND "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_ff_band<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_FF_BAND_H__ 
