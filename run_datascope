
#!/bin/bash

SELF="$0"
SRC=datascope.h
DEST=datascope.out
MAINDEF="TEST_datascope__"

. cpp_proj_defines

# g++  -Wall -std=gnu++11  -DTEST_MJM_GLUT_SCOPE -I. -I../../mjm/hlib -I../../mjm/num   -I/usr/include/GL -gdwarf-3 -O0  -x c++ mjm_glut_scope.h  -o mjm_glut_scope.out -lpthread -lreadline -lGL -lglut -lGLU

#  g++  -std=gnu++11 -DTEST_MJM_GLUT_SAVER -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_glut_saver.h  -o mjm_glut_saver.out -lpthread -lreadline  -lGL -lGLU -lglut -lpng -lavcodec -lswscale -lavutil 


# for the svg crap
# QUICKXXXCOMPILE  g++  -Wall -Wno-misleading-indentation  -std=gnu++14 -DTEST_MJM_SVG_RENDER -I. -I../../mjm/hlib -I../../mjm/num -I/usr/include/glib-2.0  -I/usr/include/GL -I/usr/include/librsvg-2.0/librsvg.h -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/cairo  -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include  -I/usr/include/librsvg-2.0/ -gdwarf-3 -O0  -x c++ mjm_svg_render.h  -o mjm_svg_render.out -lglib-2.0 -lpthread -lreadline

SVG_INC="-I/usr/include/glib-2.0  -I/usr/include/GL -I/usr/include/librsvg-2.0/librsvg.h -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/cairo  -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include  -I/usr/include/librsvg-2.0/"

# saver seems to interact with render 
# https://zhangboyi.gitlab.io/post/2020-09-14-resolve-dso-missing-from-command-line-error/
#A not accepted answer with 24 ups says the following. applying the export LDFLAGS="-Wl,--copy-dt-needed-entries" helped me to suppress the error.



 #/usr/lib/x86_64-linux-gnu/librsvg-2.so

#LINK="$MMCD_LINK -lpthread  -lGL -lglut -lGLU -lglut -lpng -lavcodec -lswscale -lavutil "
LINK="$MMCD_LINK -Wl,--copy-dt-needed-entries  -lpthread  -lrsvg-2 -lglib-2.0 -lGL -lglut -lGLU -lglut -lpng -lavcodec -lswscale -lavutil "
COMPILER="$MMCD_COMPILER -std=gnu++14 "
# string_kvp etc still there 
#INCDIR=" -MMD -MF datascope.deps $MMCD_INCDIR -I../freefem  -I/usr/include/GL "  # " -I.. " 
INCDIR=" -MMD -MF datascope.deps $MMCD_INCDIR -I../freefem  -I/usr/include/GL   $SVG_INC "  # " -I.. " 

# just move it local for now 
#SRC=$MMCD_SRCDIR/$SRC
SRC=./$SRC

WARNS=$MMCD_WARNS

DEBUG="$MMCD_DEBUG" # " -gdwarf-3 -O0 "
#OPT="$MMCD_OPT -gdwarf-3 -Wno-deprecated-declarations " # " -O3 "
OPT="-O2  -gdwarf-3 -Wno-deprecated-declarations " # " -O3 "
PROFILE="$MMCD_PROFILE" # " -O3 -gdwarf-3 -pg "
# ffmpeg 4 has a couple of deprecations. 
FLAGS="  -Wno-deprecated-declarations   $DEBUG"

RUN_DATA="datascope.txt"
RUN_DATA="listenraw.txt"
compile()
{
mmcd_h_compile
}
run()
{
"./$DEST" -source "$RUN_DATA"   
}

list_files()
{
cpp -M  -std=gnu++11 -DTEST_datascope__   -x c++  | sed -e 's/ /\n/g' | grep -v "^/usr" | grep "[A-Za-z0-9]"

}  # list_files 

push_to_git()
{
l1=`find -name "*.zip" `
newbackup -deps
l2=`find -name "*.zip" `
fn=`echo $l1 $l2 | sed -e 's/ /\n/g' | sort | uniq -c | awk '{ if ($1 =="1") print $2 }'`
n=`echo $fn |wc  -w `
if [ "$n" == "1" ]
then
mygit -push-zip "$fn" mjmdatascope 
else
echo not sure what to push n=$n and $fn
fi

} # push_to_git





help()
{
echo Usage $0 
cat "$0" | grep "=="  | grep -v grep | sed -e 's/.*==//' | sed -e 's/"[^"]*$//' 
}
while [ "$*" != "" ]
do
start="$*"
if [ "$1" == "-help" ]
then
help
shift
fi


if [ "$1" == "-push_to_git" ]
then
#shift
push_to_git
shift
fi




if [ "$1" == "-compile" ]
then
compile
shift
fi

if [ "$1" == "-install" ]
then
x=$devinstalldir
if [ "$x" != "" ]
then
echo cp "$DEST" "$x/$DEST"
cp "$x/$DEST" "$x/$DEST."2023-03-16-1678965868
cp "$DEST" "$x/$DEST"
else
echo no install dir $devinstalldir
fi

shift
fi


if [ "$1" == "-noglut" ]
then
echo removing graphics support 
NO_GR=1
FLAGS="$FLAGS -DNO_DSCOPE_GRAPHICS"
shift
fi



if [ "$1" == "-opt" ]
then
FLAGS=$OPT
shift
fi
if [ "$1" == "-start" ]
then
shift
./datascope.out -source listenraw.txt  $* 2>&1
while [ "$1" != "" ] ; do shift; done
fi


if [ "$1" == "-run" ]
then
shift
#run  $*
run 
#shift
fi

if [ "datascope" == "-list" ]
then
shift
list_files
fi


if [ "$*" == "$start" ]
then
help
exit -1
fi
done

