#ifndef MJM_GLUT_GRATICULE_H__
#define MJM_GLUT_GRATICULE_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <freeglut.h> 
#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2024 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Jasper GA 30143 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_glut_graticule.h},
  url = {},
  version = {0.0.0},
  date-started={2024-04-12},
}
*/

// Fri 12 Apr 2024 10:36:42 AM EDT
// generated by /home/documents/cpp/scripts/cpputil -operand -classhdr mjm_glut_graticule   
// QUICKCOMPILE  g++  -MMD -MF mjm_glut_graticule.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_GLUT_GRATICULE -I/usr/include/GL -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_glut_graticule.h  -o mjm_glut_graticule.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_glut_graticule("mjm_glut_graticule" , "  ");

template <class Tr>
class mjm_glut_graticule 
{
 typedef mjm_glut_graticule Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
 class _graicule_line  
{

public:
_graicule_line() {Init_graicule_line(); } 
~_graicule_line() {Free_graicule_line(); } 

_graicule_line(const Line & l,  const IdxTy first ) { Init_graicule_line(l,first); }
_graicule_line(const StrTy & s,  const IdxTy flags ) { Init_graicule_line(s,flags); }
_graicule_line(const Ragged & r, const IdxTy first,const IdxTy i0, const IdxTy flags ) 
{Init_graicule_line(r,first,i0,flags); } 

//_graicule_line(const _graicule_line & that ) { *this=that ; }  
//bool operator<(const _graicule_line & that) const { return false;}
//bool operator==(const _graicule_line & that) const { return false;}
//bool operator>(const _graicule_line & that) const { return false;}
//_graicule_line & operator++() const { return *this;}
//_graicule_line & operator+=(const _graicule_line & that ) { return *this;}
//_graicule_line & operator=(const _graicule_line & that ) { return *this;}

void set(const D & x0, const D & y0, const D & z0, const bool vert,
const D & len, const D & r, const D & g, const D & b, const D & lw)
{
m_x0=x0; m_y0=y0; m_z0=z0;

if (vert) {  m_x1=x0; m_y1=y0+len; m_z1=z0; }
else { m_x1=x0+len; m_y1=y0; m_z1=z0; } 

m_r=r; m_g=g; m_b=b;
m_lw=lw;
}
void set_width( const D & w) { m_lw=w; } 
void set(const D & x0, const D & y0, const D & z0, 
const D & x1, const D & y1, const D & z1, 
const D & r, const D & g, const D & b, const D & lw)
{
m_x0=x0; m_y0=y0; m_z0=z0;

 m_x1=x1; m_y1=y1; m_z1=z1; 

m_r=r; m_g=g; m_b=b;
m_lw=lw;
}



StrTy save( const IdxTy flags=0) const { return Save_graicule_line(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_graicule_line(flags); } 

template <class ModelInfo, class ViewInfo, class DrawInfo>
IdxTy draw(ModelInfo & m, ViewInfo & v, DrawInfo * sdp)
{ return Draw(m,v,sdp); } 


private:
template <class ModelInfo, class ViewInfo, class DrawInfo>
IdxTy Draw(ModelInfo & m, ViewInfo & v, DrawInfo * sdp)
{
/// highly similar should coalesece... 
glColor3f(m_r,m_g,m_b );
MM_ONCE("line width deprecated wtf",)
 glLineWidth(m_lw);
MM_ONCE("dun line width deprecated wtf",)
v.doglutpos(glVertex3f,m_x0,m_y0,m_z0);
v.doglutpos(glVertex3f,m_x1,m_y1,m_z1);
//MM_ERR(MMPR3(m_r,m_g,m_b));
//MM_ERR(MMPR3(m_x0,m_y0,m_z0));
//MM_ERR(MMPR3(m_x1,m_y1,m_z1));

return 0;
} 



void Init_graicule_line(const StrTy & s,  const IdxTy flags ) 
{ Init_graicule_line(); 
BaseParams kvp(s);

}
void Init_graicule_line(const Line & l,  const IdxTy first ) 
{ 
Init_graicule_line();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_graicule_line

void Init_graicule_line(const Ragged & r, const IdxTy first,const IdxTy i0,const IdxTy flags ) 
{
Init_graicule_line();
const IdxTy sz=r.size();
for(IdxTy i=i0; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();

} // i 

} // Init_graicule_line

StrTy Save_graicule_line( const IdxTy flags=0) const  
{
StrTy s;
//BaseParams kvp();
BaseParams kvp;
//kcp,encode(s,"",);
return s; 
} // Dump 



StrTy Dump_graicule_line( const IdxTy flags=0) const  
{
Ss ss;
// ss<<MMPR4(); 
ss<<MMPR3( m_x0,m_y0,m_z0);
ss<<MMPR3( m_x1,m_y1,m_z1);
ss<<MMPR3(m_r,m_g,m_b);
ss<<MMPR(m_lw); 

return ss.str(); 
} // Dump 


void Free_graicule_line()
{

} // Free_graicule_line

void Init_graicule_line()
{
m_lw=0;

} // Init_graicule_line

// _graicule_lineMEMBERS

D m_x0,m_y0,m_z0;
D m_x1,m_y1,m_z1;
D m_r,m_g,m_b;
D m_lw; 

}; // _graicule_line


typedef _graicule_line GratLine;
typedef std::vector<GratLine> GratLines;



// API

public:
mjm_glut_graticule() {Init(); }
mjm_glut_graticule(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_glut_graticule(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}

IdxTy config(const StrTy & sin=StrTy(), const IdxTy flags=0)
{ return Config(sin,flags); }
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

~mjm_glut_graticule() {}
IdxTy append(const Myt & that, const IdxTy flags)
{ return Append(that,flags); } 
mjm_glut_graticule(const mjm_glut_graticule & that ) { *this=that ; }  
bool operator<(const mjm_glut_graticule & that) const { return false;}
bool operator==(const mjm_glut_graticule & that) const { return false;}
bool operator>(const mjm_glut_graticule & that) const { return false;}
mjm_glut_graticule & operator++() const { return *this;}
mjm_glut_graticule & operator+=(const mjm_glut_graticule & that ) { return *this;}
mjm_glut_graticule & operator=(const mjm_glut_graticule & that ) { return *this;}
template <class ModelInfo, class ViewInfo, class DrawInfo>
IdxTy draw(ModelInfo & m, ViewInfo & v, DrawInfo * sdp)
{ return  Draw(m, v,  sdp); } // draw

StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=((~1)<<b); }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


D Myround(const D & in, const IdxTy n)
{
D x=(in<0)?(-in):in;
int  mant=0;
D fac=1;
D doh=1;
MM_ILOOP(i,n){ doh*=10; } 
while (int(x)>0) {x=x*.1; fac*=.1; ++mant; }  
if (x!=0) { while (int(x)==0) {x=x*10;fac*=10.0;  ++mant; }   }
// quantize in terms of fac. 
//D y=int(x*doh)/doh/fac;
D y=int(.5+x*doh)/doh/fac;
//MM_ERR(MMPR4(in,x,mant,y))
return (in<0)?(-y):y;
} // Myround
typedef std::vector<D> Locations;
void Locate(Locations & l, const D & lo, const D & h, const IdxTy n)
{
if (n<2) return;
if (int(n)<0) return ; 
const D range=h-lo;
//D d=range/D(n-1);
D d=range/D(n-1);
// given this range, find snapped or rounded or cool locations 
Locations snapped;
// quantize in terms of the range,
D q=Myround(d,0);
//MM_ERR(MMPR4(d,range,q,lo))
// may adjust to snap to common values 
D base=int(.5*((lo<0)?(-1):1)+lo/q)*q;
d=int(.5+d/q)*q;
D adj=.0*5;
// for snap quantize the line to rounded values 
//MM_ILOOP(i,n)
{
int i=0;
while (true)
{
if (i>=(n<<1)) break; 
D yy=base+1.0*i*d+adj*d;
if (yy>(h-.5*d)) break;
l.push_back(yy);
++i;
} // i 
}  //scoping 
} // Locate


template <class ModelInfo, class ViewInfo, class DrawInfo>
void Make(ModelInfo & m, ViewInfo & v, DrawInfo * sdp)
{
m_lines.clear();
D x,y,z;
x=-1; y=-1; z=0;
v.inv_inplacepos(x,y,z);
D x1,y1,z1;
x1=1; y1=1; z1=0;
v.inv_inplacepos(x1,y1,z1);
// now split up space hopefull this works ok withz=0
IdxTy nx=m_nx; // 5;
IdxTy ny=m_ny; // 5;
if (!m_fixed_width) 
{
if ((nx>5)||(ny>5)) m_lwidth=1;
else m_lwidth=2;
} // m_fixed_w

{ // scope y
Locations loc;
if (m_use_snap_y)Locate(loc, y,y1,ny);
const bool use_snap=(m_use_snap_y)&&(y1>y);

//MM_ILOOP(i,ny)
MM_ILOOP(i,loc.size())
{
GratLine l;
D yy=0; // loc[i]; 
if (!use_snap) yy= y+1.0*i*(y1-y)/ny;
else yy=loc[i];
l.set(x,yy,z,x1,yy,z1,1,1,1,m_lwidth);

D yp=-1+i*2.0/ny;
if (use_snap)  yp=-1+((yy-y)*ny/(y1-y))*2.0/ny;

glRasterPos3f(0,yp, 0);
//glRasterPos3f(0,-1+i*2.0/ny, 0);
Ss ss;
ss<<yy;
 glutBitmapString(GLUT_BITMAP_TIMES_ROMAN_24, (const unsigned char *)ss.str().c_str());


//l.set(x,y+1.0*i*(y1-y)/ny,z,false,x1-x,1,1,1,2);
//MM_ERR(MMPR4(x,y+1.0*i*(y1-y)/ny,z,x1-x))
m_lines.push_back(l);
} // i 
} // scope y

Locations loc;
if (m_use_snap_x) Locate(loc, x,x1,nx);
const bool use_snap=m_use_snap_x&&(x1>x);
//MM_ILOOP(i,nx)
MM_ILOOP(i,loc.size())
{
GratLine l;
D xx=0; // loc[i]; 
if (!use_snap) xx= x+1.0*i*(x1-x)/nx;
else xx=loc[i];
//const D xx=x+1.0*i*(x1-x)/nx;
//l.set(x+1.0*i*(x1-x)/nx,y,z,!false,y1-y,1,1,1,2);
l.set(xx,y,z,xx,y1,z1,1,1,1,m_lwidth);

D xp=-1+i*2.0/nx;
if (use_snap)  xp=-1+((xx-x)*nx/(x1-x))*2.0/nx;
glRasterPos3f(xp, .1,0);
//glRasterPos3f(-1+i*2.0/nx, .1,0);
Ss ss;
ss<<xx;
 glutBitmapString(GLUT_BITMAP_TIMES_ROMAN_24, (const unsigned char *)ss.str().c_str());

m_lines.push_back(l);
} // i 

//  glColor3f(rgb.r, rgb.g, rgb.b);
//  glRasterPos2f(x, y);
//  glRasterPos3f(x, y,0.0);
//if (font==0)
//  glutBitmapString(GLUT_BITMAP_TIMES_ROMAN_24, (const unsigned char *)string);
//  else glutBitmapString(font, (const unsigned char *) string);

} // Make

template <class ModelInfo, class ViewInfo, class DrawInfo>
IdxTy Draw(ModelInfo & m, ViewInfo & v, DrawInfo * sdp)
{

Make(m,v,sdp);
typename ViewInfo::G  oldw=100;
//MM_ERR(MMPR(oldw))
glGetFloatv(GL_LINE_WIDTH,&oldw);
//MM_ERR(MMPR(oldw))
// fuck 
//glBegin(GL_LINE_STRIP);
//glColor3f(pi.r(),pi.g(),pi.b() );
glColor3f(1.0f,1.0f,1.0f );
MM_LOOP(ii,m_lines) {

glBegin(GL_LINE_STRIP);
//glBegin(GL_LINES);
 (*ii).draw(m,v,sdp);
glEnd();

 } 
//v.doglutpos(glVertex3f,pi.x(),pi.y(),pi.z());
//v.doglutpos(glVertex3f,pi.x(),pi.y(),pi.z());
//glEnd();
glLineWidth(oldw);
#if 0 
//MM_ERR(" drawing ornate ")
glPointSize(4.0);
glBegin(GL_POINTS);
MM_LOOP(jj,m_map)
{
auto& p=(*jj).second; // m.m_ornate_points;
//MM_ERR(MMPR(p.size()))
MM_LOOP(ii,p)
{
//MM_ERR(" point ")
// this is a tokenized_point
const PointEntry& pi=(*ii);
glColor3f(pi.r(),pi.g(),pi.b() );//
// these need to be translated internally.
const StrTy & shape=p(pi.shape());
Shape * pshape=(Shape*)pi.shapep();
v.doglutpos(glVertex3f,pi.x(),pi.y(),pi.z());
if (pshape==NULL)
{
//MM_ERR(" no pshapep")
//continue;
} // null 
//MM_ERR(MMPR4(shape,pi.x(),pi.y(),pshape))
//MM_ERR(MMPR(pi.dump()))
//DrawOrnateShape(pi,pshape,v,sdp);
if (false) v.draw_ornate_shape(pi,pshape,sdp);
} // ii 
} // jj 
glEnd();
#endif
return 0;
} // Draw



void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{
m_nx=6;
m_ny=5;
m_use_snap_x=true;
m_use_snap_y=true;
m_lwidth=2;
m_fixed_width=false;
} // Init
IdxTy Append(const Myt & that, const IdxTy flags)
{ 
// save nothing ... 

return 0; } 
IdxTy Config(const StrTy & sin=StrTy(), const IdxTy flags=0)
{ 
m_config=sin;
BaseParams kvp(sin);
kvp.get_mod(m_nx,"nx");
kvp.get_mod(m_ny,"ny");
kvp.get(m_use_snap_x,"snap");
kvp.get(m_use_snap_x,"snapx");
kvp.get(m_use_snap_y,"snap");
kvp.get(m_use_snap_y,"snapy");
kvp.get(m_lwidth,"lwidth");
kvp.get(m_fixed_width,"fixedw");
MM_ERR(MMPR4(m_nx,m_ny,m_use_snap_x,m_use_snap_y)<<MMPR2(m_fixed_width,m_lwidth))
return 0;
 } // Config



// MEMBERS
StrTy m_config;
GratLines m_lines;
IdxTy m_nx, m_ny;
D m_lwidth;
bool m_fixed_width;
bool m_use_snap_x, m_use_snap_y;
}; // mjm_glut_graticule

//////////////////////////////////////////////

template <class Tr>
class mjm_glut_graticule_map : public std::map<typename Tr::StrTy, mjm_glut_graticule< Tr > >  
{
 typedef mjm_glut_graticule_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_glut_graticule< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_glut_graticule_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_glut_graticule_map




////////////////////////////////////////////
#ifdef  TEST_MJM_GLUT_GRATICULE
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_glut_graticule <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_GLUT_GRATICULE "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;
int main(int argc,char **args)
{
about();
typedef mjm_glut_graticule<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_GLUT_GRATICULE_H__ 
