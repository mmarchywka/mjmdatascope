#ifndef MJM_DSCOPE_HEATMAP_H__
#define MJM_DSCOPE_HEATMAP_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2023 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Jasper GA 30143 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_dscope_heatmap.h},
  url = {},
  version = {0.0.0},
  date-started={2023-12-27},
}
*/

// Wed 27 Dec 2023 06:02:19 AM EST
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_dscope_heatmap   
// QUICKCOMPILE  g++  -MMD -MF mjm_dscope_heatmap.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_DSCOPE_HEATMAP -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_dscope_heatmap.h  -o mjm_dscope_heatmap.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_dscope_heatmap("mjm_dscope_heatmap" , "  ");

template <class Tr>
class mjm_dscope_heatmap 
{
 typedef mjm_dscope_heatmap Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
typedef mjm_strings StrUtil;
// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
typedef std::vector<StrTy> Names;

 class _box  
{
typedef unsigned char  ColTy;
ColTy By(const IdxTy c, const IdxTy b)
{ return (c>>(b<<3))&255; } 
public:
_box() {Init_box(); } 
~_box() {Free_box(); } 

_box(const Line & l,  const IdxTy first ) { Init_box(l,first); }
_box(const StrTy & s,  const IdxTy flags ) { Init_box(s,flags); }
_box(const Ragged & r, const IdxTy first,const IdxTy i0, const IdxTy flags ) 
{Init_box(r,first,i0,flags); } 
_box(const IdxTy i, const IdxTy j, const IdxTy c)
: m_row(i),m_col(j),m_r(By(c,2)),m_g(By(c,1)),m_b(By(c,0)) {}

_box(const _box & that ) { *this=that ; }  
IdxTy i() const { return m_row;}
IdxTy j() const { return m_col;}
IdxTy ri() const { return m_r;}
IdxTy gi() const { return m_g;}
IdxTy bi() const { return m_b;}

bool operator<(const _box & that) const { return false;}
bool operator==(const _box & that) const { return false;}
bool operator>(const _box & that) const { return false;}
_box & operator++() const { return *this;}
_box & operator+=(const _box & that ) const { return *this;}
//_box & operator=(const _box & that ) { return *this;}

StrTy save( const IdxTy flags=0) const { return Save_box(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_box(flags); } 
private:
void Init_box(const StrTy & s,  const IdxTy flags ) 
{ Init_box(); 
BaseParams kvp(s);

}
void Init_box(const Line & l,  const IdxTy first ) 
{ 
Init_box();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_box

void Init_box(const Ragged & r, const IdxTy first,const IdxTy i0,const IdxTy flags ) 
{
Init_box();
const IdxTy sz=r.size();
for(IdxTy i=i0; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();

} // i 

} // Init_box

StrTy Save_box( const IdxTy flags=0) const  
{
StrTy s;
//BaseParams kvp();
BaseParams kvp;
//kcp,encode(s,"",);
return s; 
} // Dump 



StrTy Dump_box( const IdxTy flags=0) const  
{
Ss ss;
ss<<MMPR4(m_row,m_col, ri(),gi())<<MMPR(bi()); 
return ss.str(); 
} // Dump 


void Free_box()
{

} // Free_box

void Init_box()
{
m_row=m_col=BAD;
m_r=m_g=m_b=BAD; 

} // Init_box

// _boxMEMBERS
IdxTy m_row,m_col;
ColTy m_r,m_g,m_b; 

}; // _box

typedef _box BoxTy;
// maybe nested map for i j index but not needed now
typedef std::vector<BoxTy> Boxes;
typedef typename Boxes::const_iterator BoxItor;
// API

public:
typedef BoxItor box_iterator;
mjm_dscope_heatmap() {Init(); }
mjm_dscope_heatmap(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_dscope_heatmap(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
IdxTy load_heatmap(const Ragged & r, const IdxTy taxin, const IdxTy taxkeep, const IdxTy flags)
{  return LoadHeatMap(r,taxin,taxkeep,flags); } 
IdxTy size() const { return m_boxes.size(); } 
IdxTy rows() const { return m_row_names.size(); } 
IdxTy cols() const { return m_col_names.size(); } 
// currently all common pfx is stripped to amke more concise
// but this should be optional... 
const Names& row_names() const { return m_row_names;}
const StrTy& row_name_pfx() const { return m_row_pfx;}
const Names& col_names() const { return m_col_names;}
const StrTy& col_name_pfx() const { return m_col_pfx;}
box_iterator begin() const { return m_boxes.begin(); } 
box_iterator end() const { return m_boxes.end(); } 
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

~mjm_dscope_heatmap() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
int myatoix(const char * c) const  { return mjm_canned_methods::myatoix(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=((~1)<<b); }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{


} // Init

IdxTy LoadHeatMap(const Ragged & r, const IdxTy taxin, const IdxTy taxkeep, const IdxTy flags)
{  

const IdxTy sz=r.size();
//if (sz<1) return 0;
IdxTy first=0;
while (first<sz)
{
const Line & l=r[first];
if (l.size()>0) if (l[0].c_str()[0]!='#') break; 
++first;
} // first
//MM_ERR(MMPR2(first,sz))
if (first==sz)
{
MM_ERR(" no data lines found "<<MMPR2(r.size(),first))
return 0; 
}
const Line & l=r[first];
const IdxTy tlen=l.size();
const IdxTy cols=tlen-taxin;
if (cols>tlen)
{
MM_ERR(" sizes are not consistent will die "<<MMPR2(l.size(),taxin))
return BAD;
}
MM_ILOOP(i,cols) { m_col_names.push_back(l[i]);  }
const IdxTy k0=tlen-taxkeep;
for(IdxTy i=1+first; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();
if (len!=tlen)
{
MM_ERR(" non uniform line "<<MMPR3(i,len,tlen))
continue;
} // len
MM_ILOOP(j,cols)
{
const IdxTy v=myatoix(l[j].c_str());
//MM_ERR(MMPR4(i,j,l[j],v))
if (v==0) continue;
BoxTy b(i-(1+first),j,v);
m_boxes.push_back(b);
} // j 
StrTy rn;
if (k0<tlen) rn=l[k0];
for(IdxTy k=k0+1; k<tlen; ++k) rn+=" "+l[k];
m_row_names.push_back(rn);
} // i 

// flag option needed TODO 
Names x;
m_row_pfx=StrUtil::common_prefix(x,m_row_names);
m_row_names=x;
x.clear();
m_col_pfx=StrUtil::common_prefix(x,m_col_names);
m_col_names=x;
//MM_ERR(MMPR(m_boxes.size()))
return 0;
} // LoadHeatMap



// MEMBERS
// TODO need to do somethng more complete
StrTy m_row_pfx, m_col_pfx;
Names m_row_names,m_col_names;
Boxes m_boxes;

}; // mjm_dscope_heatmap

//////////////////////////////////////////////

template <class Tr>
class mjm_dscope_heatmap_map : public std::map<typename Tr::StrTy, mjm_dscope_heatmap< Tr > >  
{
 typedef mjm_dscope_heatmap_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_dscope_heatmap< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_dscope_heatmap_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_dscope_heatmap_map




////////////////////////////////////////////
#ifdef  TEST_MJM_DSCOPE_HEATMAP
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_dscope_heatmap <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_DSCOPE_HEATMAP "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;
int main(int argc,char **args)
{
about();
typedef mjm_dscope_heatmap<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_DSCOPE_HEATMAP_H__ 
