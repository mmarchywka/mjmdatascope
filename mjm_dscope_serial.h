#ifndef MJM_DSCOPE_SERIAL_H__
#define MJM_DSCOPE_SERIAL_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

#include "mjm_collections.h"
#include "mjm_string_kvp.h"
#include "mjm_so_loader.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Thu Mar 16 08:09:10 EDT 2023
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_dscope_serial   
// g++  -Wall -std=gnu++11 -DTEST_MJM_DSCOPE_SERIAL -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_dscope_serial.h  -o mjm_dscope_serial.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_dscope_serial("mjm_dscope_serial"
, "  ");

template <class Tr>
class mjm_dscope_serial 
{
 typedef mjm_dscope_serial Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

typedef mjm_string_kvp<Tr> StrKvp;
typedef mjm_so_loader<Tr> Loader;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line ;


typedef unsigned char Data;
typedef std::vector<Data * > Frags;
typedef long int Big;
enum { SHIFT=sizeof(Data)<<3};
public:
typedef Frags frags_type;

mjm_dscope_serial() {}
~mjm_dscope_serial() {}
// TODO FIXME this is arch dependent now, 
template <class Ty > void serialize(Data * p, const Ty &  n) const
{ 
MM_ONCE(" machine dependent serialization "<<sizeof(Ty), )
Serialize(p,&n,sizeof(n)); 
}
IdxTy done(frags_type & frags,const IdxTy flags) { return Done(frags,flags); }  
IdxTy serialize(frags_type & frags, const Ragged & r, const IdxTy flags)  
{ return Serialize(frags,r,flags); } 
// the frags had to be obtained here and loaded in 
// io classes.. returned after defrag 
IdxTy deserialize(Ragged & r, frags_type & frags,  const IdxTy flags)  
{ return DeSerialize(frags,r,flags); } 


void serialize(Data * p, const IdxTy   n)const { SerializeNum(p,&n,sizeof(n)); }
void serialize(Data * p, const IdxTy   n,const IdxTy fs)  const 
{ SerializeNum(p,&n,sizeof(n),fs); } 
void serialize(Data * p, const int   n)const  { SerializeNum(p,&n,sizeof(n)); } 

template <class Ty > void deserialize(Ty & n, const Data * p) const 
{ 
MM_ONCE(" machine dependent serialization "<<sizeof(Ty), )
DeSerialize(&n,p,sizeof(n)); 
}

void deserialize(IdxTy & s, const Data * p, const IdxTy n)  const
{ DeSerialize(s,p,n); } 
void deserialize(int &  s, const Data * p, const IdxTy n)  const
{ DeSerialize(s,p,n); } 


StrTy dump(const IdxTy flags=0)const  { return Dump(flags); } 

private:


IdxTy Done(frags_type & frags,const IdxTy flags) { 

return 0; // Done(frags,flags); 

}  // Done 
IdxTy Serialize(frags_type & frags, const Ragged & r, const IdxTy flags)  
{ 


return 0;


} // Ragged 




void DeSerialize(void * s, const Data * p, const IdxTy n)const  { memcpy(s,p,n); } 
void DeSerializeNum(void * s, const Data * p, const IdxTy n)  const 
{ 
 Big& np=*(Big *)s;
np=Big(0);
for(IdxTy i=0; i<n; ++i){ np<<SHIFT; np=p[i];  } 
} 


void Serialize(Data *p, const void * s, const IdxTy n)const  { memcpy(p,s,n); } 
void SerializeNum(Data *p, const void * s, const IdxTy n) const 
{
Big np=*(Big *)s;
for(IdxTy i=0; i<n; ++i){ p[i]=np; np>>=SHIFT; } 
//for(IdxTy i=n; i<fs; ++i){ p[i]=0; } 
} 
void SerializeNum(Data *p, const void * s, const IdxTy n,const IdxTy fs) const 
{
Big np=*(Big *)s;
for(IdxTy i=0; i<n; ++i){ p[i]=np; np>>=SHIFT; } 
for(IdxTy i=n; i<fs; ++i){ p[i]=0; } 
} 




bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0)const  {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


// MEMBERS



}; // mjm_dscope_serial

//////////////////////////////////////////////

template <class Tr>
class mjm_dscope_serial_map : public std::map<typename Tr::StrTy, mjm_dscope_serial< Tr > >  
{
 typedef mjm_dscope_serial_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_dscope_serial< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_dscope_serial_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_dscope_serial_map




////////////////////////////////////////////
#ifdef  TEST_MJM_DSCOPE_SERIAL
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_dscope_serial <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_DSCOPE_SERIAL "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_dscope_serial<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_DSCOPE_SERIAL_H__ 
