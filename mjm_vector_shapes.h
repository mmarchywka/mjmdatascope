#ifndef MJM_VECTOR_SHAPES_H__
#define MJM_VECTOR_SHAPES_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
#include "mjm_colors_2023.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2023 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Jasper GA 30143 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_vector_shapes.h},
  url = {},
  version = {0.0.0},
  date-started={2023-12-20},
}
*/

// Wed 20 Dec 2023 01:51:54 PM EST
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_vector_shapes   
// QUICKCOMPILE  g++  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_VECTOR_SHAPES -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_vector_shapes.h  -o mjm_vector_shapes.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_vector_shapes("mjm_vector_shapes" , "  ");

template <class Tr>
class mjm_vector_shapes 
{
 typedef mjm_vector_shapes Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
typedef mjm_colors_2023<Tr> Color;
typedef typename Color::color_desc_t ColorDesc;


//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;



 class _point  
{
class _triple
{
public:
_triple(const D & x, const D &y, const D & z): m_x(x),m_y(y),m_z(z) {}
const D & x() const { return m_x;}
const D & y() const { return m_y;}
const D & z() const { return m_z;}
D m_x,m_y,m_z;
}; // _triple

public:
_point() {Init_point(); } 
~_point() {Free_point(); } 

_point(const D & x,const D & y, const D & z) {m_x=x; m_y=y; m_z=z;}
_point(const Line & l,  const IdxTy first ) { Init_point(l,first); }
_point(const StrTy & s,  const IdxTy flags ) { Init_point(s,flags); }
_point(const Ragged & r, const IdxTy first,const IdxTy i0, const IdxTy flags ) 
{Init_point(r,first,i0,flags); } 

const D & x() const { return m_x;}
const D & y() const { return m_y;}
const D & z() const { return m_z;}
const D & x(const D & x)  { m_x=x; return m_x;}
const D & y(const D & x)  { m_y=x; return m_y;}
const D & z(const D & x)  { m_z=x; return m_z;}

_triple triple(const D & _x, const D &_y, const D & _z, const D &f) const
{
return _triple(x()*f+_x,y()*f+_y,z()*f+_z); 
} // triple

_point  operator+(const _point & that ) const
{
_point x;
x.m_x=m_x+that.m_x;
x.m_y=m_y+that.m_y;
x.m_z=m_z+that.m_z;
return x; 
} 
_point&  operator+=(const _point & that ) 
{
_point& x=*this;
x.m_x=m_x+that.m_x;
x.m_y=m_y+that.m_y;
x.m_z=m_z+that.m_z;
return *this; 
} 
_point&  operator*=(const _point & that ) 
{
_point& x=*this;
x.m_x=m_x*that.m_x;
x.m_y=m_y*that.m_y;
x.m_z=m_z*that.m_z;
return *this; 
} 

_point&  operator*(const D & x ) 
{
m_x*=x;
m_y*=x;
m_z*=z;
return *this; 
} 




StrTy save( const IdxTy flags=0) const { return Save_point(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_point(flags); } 
private:
void Init_point(const StrTy & s,  const IdxTy flags ) 
{ Init_point(); 
BaseParams kvp(s);

}
void Init_point(const Line & l,  const IdxTy first ) 
{ 
Init_point();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_point

void Init_point(const Ragged & r, const IdxTy first,const IdxTy i0,const IdxTy flags ) 
{
Init_point();
const IdxTy sz=r.size();
for(IdxTy i=i0; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();

} // i 

} // Init_point

StrTy Save_point( const IdxTy flags=0) const  
{
StrTy s;
//BaseParams kvp();
BaseParams kvp;
//kcp,encode(s,"",);
return s; 
} // Dump 



StrTy Dump_point( const IdxTy flags=0) const  
{
Ss ss;
// ss<<MMPR4(); 
return ss.str(); 
} // Dump 


void Free_point()
{

} // Free_point

void Init_point()
{
m_x=0;
m_y=0;
m_z=0;
} // Init_point

// _pointMEMBERS
D m_x,m_y,m_z; 
// move to shape for space. 
//ColorDesc m_color; 
}; // _point

typedef _point Point;



 class _shape  
{

typedef std::vector<Point> Points;
typedef std::vector<ColorDesc> Colors;

public:
typedef typename Points::const_iterator Ci;
_shape() {Init_shape(); } 
~_shape() {Free_shape(); } 
enum { MULTI_COLOR=0, UNFILLED=1,NESTED=2,STICKS=3};
_shape(const Line & l,  const IdxTy first ) { Init_shape(l,first); }
_shape(const StrTy & s,  const IdxTy flags ) { Init_shape(s,flags); }
_shape(const Ragged & r, const IdxTy first,const IdxTy i0, const IdxTy flags ) 
{Init_shape(r,first,i0,flags); } 
void add(const Point &p) {m_points.push_back(p); } 
bool multi_color() const { return Bit(m_flags,MULTI_COLOR); } 
bool filled() const { return !Bit(m_flags,UNFILLED); } 
Ci begin() const { return m_points.begin(); }
Ci end() const { return m_points.end(); }
const IdxTy size() const { return m_points.size(); } 
StrTy save( const IdxTy flags=0) const { return Save_shape(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_shape(flags); } 
private:
void Init_shape(const StrTy & s,  const IdxTy flags ) 
{ Init_shape(); 
BaseParams kvp(s);

}
void Init_shape(const Line & l,  const IdxTy first ) 
{ 
Init_shape();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_shape

void Init_shape(const Ragged & r, const IdxTy first,const IdxTy i0,const IdxTy flags ) 
{
Init_shape();
const IdxTy sz=r.size();
for(IdxTy i=i0; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();

} // i 

} // Init_shape

StrTy Save_shape( const IdxTy flags=0) const  
{
StrTy s;
//BaseParams kvp();
BaseParams kvp;
//kcp,encode(s,"",);
return s; 
} // Dump 



StrTy Dump_shape( const IdxTy flags=0) const  
{
Ss ss;
// ss<<MMPR4(); 
return ss.str(); 
} // Dump 


void Free_shape()
{

} // Free_shape

void Init_shape()
{
m_flags=0;
//m_color=0;
} // Init_shape

// _shapeMEMBERS
Points m_points;
IdxTy m_flags;
//IdxTy m_color;
ColorDesc m_color; 
// if each point has a different color 
Colors m_colors;
}; // _shape



// TYPEDEF 
typedef _shape Shape;

typedef std::map<StrTy,Shape> ShapeMap;
enum { BAD=~0};

// API

public:
typedef Shape shape_t;
typedef Point point_t;
typedef std::map<const void*,void*> copy_map_t;
mjm_vector_shapes() {Init(); }
mjm_vector_shapes(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_vector_shapes(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}

void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }
void add_ngon(const StrTy & nm,const IdxTy n)
{ AddNgon(nm,n); }  
~mjm_vector_shapes() {}
Shape * get(const StrTy & nm)
{
const auto ii=m_shapes.find(nm);
if (ii==m_shapes.end()) return 0;
return (&(*ii).second); 
}
Shape * get_default()
{
if (m_shapes.size()==0) return 0;
return &(*(m_shapes.begin())).second;
}// get_default

StrTy dump(const IdxTy flags=0) { return Dump(flags); }
copy_map_t assign_map(const Myt & that)
{
copy_map_t m;
const IdxTy sz=m_shapes.size();
const IdxTy szt=that.m_shapes.size();
if (sz!=szt) { MM_ERR(" should bne same sizes "<<MMPR2(sz,szt)) } 
MM_LOOP(ii,m_shapes)
{
const auto jj=that.m_shapes.find((*ii).first);
if (jj==that.m_shapes.end())
{ MM_ERR(" missing "<<MMPR((*ii).first)) continue; }
m[&(*jj).second]= &(*ii).second; 
}
return m;
}// assign_map

private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b)  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);

template <class Tv>
static void Ngon( Tv & x, Tv & y, const D & r, const IdxTy & n
, const D & xz=0, const D & yz=0, const D & phiz=0, const IdxTy & m=1)
{
static const D px=M_PI/180.0;
for (IdxTy i=0; i<n; ++i)
{
const D f= 360.0*((i*m)%n)/n;
D xp=r*cos(px*(phiz+f));
D yp=r*sin(px*(phiz+f));
x.push_back(xp);
y.push_back(yp);

} // i  

} // Ngon
//template <class Tv>
static void Ngon( Shape & s, const D & r, const IdxTy & n
, const D & xz=0, const D & yz=0, const D & phiz=0, const IdxTy & m=1)
{
static const D px=M_PI/180.0;
for (IdxTy i=0; i<n; ++i)
{
const D f= 360.0*((i*m)%n)/n;
D xp=r*cos(px*(phiz+f));
D yp=r*sin(px*(phiz+f));
//x.push_back(xp); y.push_back(yp);
s.add(Point(xp,yp,0));
} // i  

} // Ngon



void AddNgon(const StrTy & nm,const IdxTy n)
{

Shape s;
Ngon(s,1,n,0,0,0,1);
m_shapes[nm]=s;
//MM_ERR("making shape "<<MMPR2(nm,s.size())) 
}

void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
// load some default shapes 
AddNgon("square",4);
AddNgon("triangle",3);
AddNgon("circle",10);

} // Init 

void Init()
{


} // Init



// MEMBERS

ShapeMap m_shapes;

}; // mjm_vector_shapes

//////////////////////////////////////////////

template <class Tr>
class mjm_vector_shapes_map : public std::map<typename Tr::StrTy, mjm_vector_shapes< Tr > >  
{
 typedef mjm_vector_shapes_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_vector_shapes< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_vector_shapes_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_vector_shapes_map




////////////////////////////////////////////
#ifdef  TEST_MJM_VECTOR_SHAPES
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_vector_shapes <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_VECTOR_SHAPES "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;
int main(int argc,char **args)
{
about();
typedef mjm_vector_shapes<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_VECTOR_SHAPES_H__ 
